name: heuristic
on: workflow_dispatch
jobs:
  Benchmarks:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
        python-version:
          - '3.11'
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Dependencies
        run: |
          sudo apt install -y base-files
      - run: |
          uv pip install --system -r requirements.txt coremltools openvino-dev tensorflow --extra-index-url https://download.pytorch.org/whl/cpu --index-strategy unsafe-best-match
          yolo checks
      - run: |
          uv pip list
          python benchmarks.py --data coco128.yaml --weights yolov5n.pt --img 320 --hard-fail 0.29
          python benchmarks.py --data coco128-seg.yaml --weights yolov5n-seg.pt --img 320 --hard-fail 0.22
      - run: |
          python export.py --weights yolov5n-cls.pt --include onnx --img 224
      - run: |
          python detect.py --weights yolov5n.onnx --img 320
      - run: |
          python segment/predict.py --weights yolov5n-seg.onnx --img 320
      - run: |
          python classify/predict.py --weights yolov5n-cls.onnx --img 224
    env: {}
  Tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
        python-version:
          - '3.8'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Dependencies
        run: |
          sudo apt install -y base-files
      - run: |
          torch=""
          if [ "1.8.0" == "1.8.0" ]; then
              torch="torch==1.8.0 torchvision==0.9.0"
          fi
          uv pip install --system -r requirements.txt $torch --extra-index-url https://download.pytorch.org/whl/cpu --index-strategy unsafe-best-match
          yolo checks
          pip list
      - run: |
          m=yolov5n  # official weights
          b=runs/train/exp/weights/best  # best.pt checkpoint
          python train.py --imgsz 64 --batch 32 --weights $m.pt --cfg $m.yaml --epochs 1 --device cpu  # train
          for d in cpu; do  # devices
              for w in $m $b; do  # weights
                  python val.py --imgsz 64 --batch 32 --weights $w.pt --device $d  # val
                  python detect.py --imgsz 64 --weights $w.pt --device $d  # detect
              done
          done
          python hubconf.py --model $m  # hub
          python models/yolo.py --cfg $m.yaml  # build PyTorch model
          python export.py --weights $m.pt --img 64 --include torchscript  # export
          python - <<EOF
          import torch
          im = torch.zeros([1, 3, 64, 64])
          for path in '$m', '$b':
              model = torch.hub.load('.', 'custom', path=path, source='local')
              print(model('data/images/bus.jpg'))
              model(im)  # warmup, build grids for trace
              torch.jit.trace(model, [im])
          EOF
      - run: |
          m=yolov5n-seg  # official weights
          b=runs/train-seg/exp/weights/best  # best.pt checkpoint
          python segment/train.py --imgsz 64 --batch 32 --weights $m.pt --cfg $m.yaml --epochs 1 --device cpu  # train
          python segment/train.py --imgsz 64 --batch 32 --weights '' --cfg $m.yaml --epochs 1 --device cpu  # train
          for d in cpu; do  # devices
              for w in $m $b; do  # weights
                  python segment/val.py --imgsz 64 --batch 32 --weights $w.pt --device $d  # val
                  python segment/predict.py --imgsz 64 --weights $w.pt --device $d  # predict
                  python export.py --weights $w.pt --img 64 --include torchscript --device $d  # export
              done
          done
      - run: |
          m=yolov5n-cls.pt  # official weights
          b=runs/train-cls/exp/weights/best.pt  # best.pt checkpoint
          python classify/train.py --imgsz 32 --model $m --data mnist160 --epochs 1  # train
          python classify/val.py --imgsz 32 --weights $b --data ../datasets/mnist160  # val
          python classify/predict.py --imgsz 32 --weights $b --source ../datasets/mnist160/test/7/60.png  # predict
          python classify/predict.py --imgsz 32 --weights $m --source data/images/bus.jpg  # predict
          python export.py --weights $b --img 64 --include torchscript  # export
          python - <<EOF
          import torch
          for path in '$m', '$b':
              model = torch.hub.load('.', 'custom', path=path, source='local')
          EOF
    env: {}
